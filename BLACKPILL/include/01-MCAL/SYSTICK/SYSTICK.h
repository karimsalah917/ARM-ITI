/*******************************************************************************************/
/* Author       : Karim Salah Fathey                                                       */
/* Authority    : Information Technology Institute                                         */
/* Module       : SysTick                                                                  */
/* Version      : v1.0                                                                     */
/* Date         : 9/3/2024                                                                 */
/* File Details : Source file for SysTick Driver                                           */
/* Target       : STM32f401cc                                                              */
/*******************************************************************************************/
/********************************** Includes ***********************************************/
#include "../../00-LIB/STD.h"
#include "SYSTICK _Config.h"
/********************************** Definitions ********************************************/

/**********************************   Types ************************************************/
typedef enum {
    SYSTICK_ERROR_OK,
    SYSTICK_ERROR_INVALID_ARGUMENT,
    SYSTICK_ERROR_NOK

}SysTick_Error_t;



typedef enum{
    SysTick_CLOCK_SOURCE_AHB_8,
    SysTick_CLOCK_SOURCE_AHB
}SysTick_ClockSource_t;

typedef void (*Handler_t) (void);
/**********************************   API's ************************************************/



/**
 * @brief Enables the SysTick counter in periodic mode.
 * 
 * This function configures the SysTick timer to operate in periodic mode,
 * where it continuously counts and generates interrupts at regular intervals.
 * 
 * @return SysTick_Error_t Error code indicating success or failure of the operation.
 */
SysTick_Error_t SysTick_EnableCounterPeriodic(void);

/**
 * @brief Enables the SysTick counter in one-shot mode.
 * 
 * This function configures the SysTick timer to operate in one-shot mode,
 * where it counts down from its initial value to zero, generates an interrupt,
 * and then stops counting until re-enabled.
 * 
 * @return SysTick_Error_t Error code indicating success or failure of the operation.
 */
SysTick_Error_t SysTick_EnableCounterOneShot(void);


/**
 * @brief Disables the SysTick counter.
 * 
 * This function disables the SysTick timer from counting.
 * 
 * @return SysTick_Error_t Error code indicating success or failure of the operation.
 */
SysTick_Error_t SysTick_DisableCounter(void);

/**
 * @brief Enables SysTick interrupts.
 * 
 * This function enables interrupts generated by the SysTick timer.
 * 
 * @return SysTick_Error_t Error code indicating success or failure of the operation.
 */
SysTick_Error_t SysTick_EnableInterrupt(void);

/**
 * @brief Disables SysTick interrupts.
 * 
 * This function disables interrupts generated by the SysTick timer.
 * 
 * @return SysTick_Error_t Error code indicating success or failure of the operation.
 */
SysTick_Error_t SysTick_DisableInterrupt(void);


/**
 * @brief Set the clock source for the SysTick timer.
 * 
 * @param ClockSource The clock source to set for the SysTick timer.
 * @return SysTick_Error_t Error code indicating success or failure of the operation.
 */
SysTick_Error_t SysTick_SetClockSource(SysTick_ClockSource_t ClockSource);

/**
 * @brief Set the time interval in milliseconds for the SysTick timer.
 * 
 * @param Time The time interval in milliseconds.
 * @return SysTick_Error_t Error code indicating success or failure of the operation.
 */
SysTick_Error_t SysTick_SetTickMS(uint32 Time);

/**
 * @brief Set the callback function to be called when SysTick interrupt occurs.
 * 
 * @param handler Pointer to the callback function.
 * @return SysTick_Error_t Error code indicating success or failure of the operation.
 */
SysTick_Error_t SysTick_SetCallBack(Handler_t handler);

SysTick_Error_t SysTick_SetCurrentVal(uint32 CurrentVal);